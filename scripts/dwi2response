#!/usr/bin/env python

# Script for estimating response functions for spherical deconvolution
# A number of different approaches are available within this script for performing response function estimation.


import argparse, math, os, shutil, sys
import lib.app, lib.cmdlineParser

from lib.errorMessage     import errorMessage
from lib.getAlgorithmList import getAlgorithmList
from lib.getHeaderInfo    import getHeaderInfo
from lib.getImageStat     import getImageStat
from lib.getUserPath      import getUserPath
from lib.printMessage     import printMessage
from lib.runCommand       import runCommand
from lib.warnMessage      import warnMessage


lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au) and Thijs Dhollander (thijs.dhollander@gmail.com)'
lib.cmdlineParser.initialise('Estimate response function(s) for spherical deconvolution')

# General options
base_parser = lib.cmdlineParser.Parser(description='Base parser for dwi2response script', parents=[lib.app.parser], add_help=False)
common_options = base_parser.add_argument_group('Options common to all dwi2response algorithms')
common_options.add_argument('-shell', help='The b-value shell(s) to use in response function estimation (single value for single-shell response, comma-separated list for multi-shell response)')
common_options.add_argument('-lmax', help='The maximum harmonic degree(s) of response function estimation (single value for single-shell response, comma-separated list for multi-shell response)')
common_options.add_argument('-mask', help='Provide an initial mask for response voxel selection')
common_options.add_argument('-voxels', help='Output an image showing the final voxel selection(s)')
common_options.add_argument('-grad', help='Pass the diffusion gradient table in MRtrix format')
common_options.add_argument('-fslgrad', nargs=2, metavar=('bvecs', 'bvals'), help='Pass the diffusion gradient table in FSL bvecs/bvals format')
lib.cmdlineParser.flagMutuallyExclusiveOptions( [ 'grad', 'fslgrad' ] )

algorithm_list = getAlgorithmList()
# Subparsers for individual algorithms
subparsers = lib.app.parser.add_subparsers(title='Algorithm choices', help='Select the algorithm to be used to derive the response function; additional details and options become available once an algorithm is nominated. Options are: ' + ', '.join(algorithm_list), dest='algorithm')

# Import the command-line settings for all algorithms found
from src import dwi2response
for name in algorithm_list:
  __import__('src.dwi2response', globals(), locals(), [ name ])
  algorithm = getattr(dwi2response, name)
  algorithm.initParser(subparsers, base_parser)


lib.app.initialise()


# Find out which algorithm the user has requested
algorithm = getattr(dwi2response, lib.app.args.algorithm)


# Check for prior existence of output files, and grab any input files, used by the particular algorithm
lib.app.checkOutputFile(lib.app.args.voxels)
algorithm.checkOutputFiles()


# Sanitise some inputs, and get ready for data import
if lib.app.args.lmax:
  try:
    lmax = [ int(x) for x in lib.app.args.lmax.split(',') ]
    if any([lmax_value%2 for lmax_value in lmax]):
      errorMessage('Value of lmax must be even')
  except:
    errorMessage('Parameter lmax must be a number')
  if lib.app.args.single_shell and not len(lmax) == 1:
    errorMessage('Can only specify a single lmax value for single-shell algorithms')
shell_option = ''
if lib.app.args.shell:
  try:
    shell_values = [ int(x) for x in lib.app.args.shell.split(',') ]
  except:
    errorMessage('-shell option should provide a comma-separated list of b-values')
  if lib.app.args.single_shell and not len(shell_values) == 1:
    errorMessage('Can only specify a single b-value shell for single-shell algorithms')
  shell_option = ' -shell ' + lib.app.args.shell

grad_import_option = ''
if lib.app.args.grad:
  grad_import_option = ' -grad ' + getUserPath(lib.app.args.grad, True)
elif lib.app.args.fslgrad:
  grad_import_option = ' -fslgrad ' + getUserPath(lib.app.args.fslgrad[0], True) + ' ' + getUserPath(lib.app.args.fslgrad[1], True)

lib.app.makeTempDir()

# Get standard input data into the temporary directory
if lib.app.args.single_shell or shell_option:
  runCommand('mrconvert ' + getUserPath(lib.app.args.input, True) + ' - -stride 0,0,0,1' + grad_import_option + ' | dwiextract - ' + os.path.join(lib.app.tempDir, 'dwi.mif') + shell_option)
else: # Don't want to discard b=0 in multi-shell algorithms, which dwiextract will do
  runCommand('mrconvert ' + getUserPath(lib.app.args.input, True) + ' ' + os.path.join(lib.app.tempDir, 'dwi.mif') + ' -stride 0,0,0,1' + grad_import_option)
if lib.app.args.mask:
  runCommand('mrconvert ' + getUserPath(lib.app.args.mask, True) + ' ' + os.path.join(lib.app.tempDir, 'mask.mif') + ' -datatype bit')

algorithm.getInputFiles()

lib.app.gotoTempDir()


# Make sure it's actually a DWI that's been passed
size = getHeaderInfo('dwi.mif', 'size').split()
if len(size) != 4:
  errorMessage('Input image must be a 4D image')
DW_scheme = getHeaderInfo('dwi.mif', 'dwgrad').split('\n')
if len(DW_scheme) != int(size[3]):
  errorMessage('Input image does not contain valid DW gradient scheme')
  

# Generate a brain mask (if necessary)
# Otherwise, check that the mask provided is appropriate
if os.path.exists('mask.mif'):
  dwi_size = [ int(x) for x in getHeaderInfo('dwi.mif', 'size').split() ]
  mask_size = [ int(x) for x in getHeaderInfo('mask.mif', 'size').split() ]
  if not mask_size[:3] == dwi_size[:3]:
    errorMessage('Dimensions of provided mask image do not match DWI')
else:
  runCommand('dwi2mask dwi.mif mask.mif')


# From here, the script splits depending on what estimation algorithm is being used
algorithm.execute()


# Finalize for all algorithms
if lib.app.args.voxels:
  runCommand('mrconvert voxels.mif ' + getUserPath(lib.app.args.voxels, True) + lib.app.mrtrixForce)
lib.app.complete()

