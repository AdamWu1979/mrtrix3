#!/usr/bin/env python

# Script that generates a five-tissue-type (5TT) segmented image: the format appropriate for ACT
#
# In this script, major stages of processing can be performed in one of two ways:
#   - Using FSL tools: BET for brain extraction, FAST for tissue segmentation, FIRST for sub-cortical grey matter segmentation
#   - Using segmentations from FreeSurfer


import argparse, os, sys
import lib.app, lib.cmdlineParser

from lib.getAlgorithmList import getAlgorithmList
from lib.getUserPath      import getUserPath
from lib.runCommand       import runCommand

lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.addCitation('', 'Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. Anatomically-constrained tractography: Improved diffusion MRI streamlines tractography through effective use of anatomical information. NeuroImage, 2012, 62, 1924-1938', False)
lib.cmdlineParser.initialise('Generate a 5TT image suitable for ACT')

base_parser = lib.cmdlineParser.Parser(description='Base parser for 5ttgen script', parents=[lib.app.parser], add_help=False)
common_options = base_parser.add_argument_group('Options common to all 5ttgen algorithms')
common_options.add_argument('-nocrop', action='store_true', default=False, help='Do NOT crop the resulting 5TT image to reduce its size (keep the same dimensions as the input image)')
common_options.add_argument('-sgm_amyg_hipp', action='store_true', default=False, help='Represent the amygdalae and hippocampi as sub-cortical grey matter in the 5TT image')

algorithm_list = getAlgorithmList()
subparsers = lib.app.parser.add_subparsers(title='Algorithm choices', help='Select the software / algorithm to be used to derive the 5TT image; additional details and options become available once an algorithm is nominated. Options are: ' + ', '.join(algorithm_list), dest='algorithm')

# Import the command-line settings for all algorithms found
from src import _5ttgen
for name in algorithm_list:
  __import__('src._5ttgen', globals(), locals(), [ name ])
  algorithm = getattr(_5ttgen, name)
  algorithm.initParser(subparsers, base_parser)

lib.app.initialise()

# Find out which algorithm the user has requested
algorithm = getattr(_5ttgen, lib.app.args.algorithm)

lib.app.checkOutputFile(lib.app.args.output)
algorithm.checkOutputFiles()

lib.app.makeTempDir()
runCommand('mrconvert ' + getUserPath(lib.app.args.input, True) + ' ' + os.path.join(lib.app.tempDir, 'input.mif'))
algorithm.getInputFiles()

lib.app.gotoTempDir()

algorithm.execute()

runCommand('mrconvert result.mif ' + getUserPath(lib.app.args.output, True) + lib.app.mrtrixForce)
lib.app.complete()

